--=========================================================================
-- AR 2013-14: Coursework 2
--=========================================================================
-- Student UUN: 1045049

--=========================================================================
-- Secs 3.2 and 3.3: Verifying and fixing a FIFO model
--=========================================================================

-- For Sec 3.2:
-- Run NuSMV on this file.  At its end, it includes the fifo-properties.smv 
-- file where you should enter all the requested LTL and CTL properties.

-- For Sec 3.3: 
-- 1. Make a copy named fifo-fixed.smv of this file fifo.v. 
-- 2. Enter your fix to the bug in the model in fifo-fixed.smv.  Do not 
--    alter fifo.smv.  
-- 3. Add here a description of the bug and an explanation of your 
--    fix for the bug.  Also add a comment in the text for the model
--    next to the position(s) where you make the fix.

-- <ENTER HERE THE BUG DESCRIPTION AND FIX EXPLANATION>
-- The bug is within the assignment of the empty flag. It stated that if
-- the read pointer +1 (mod the word depth) is equal to the write pointer
-- and we have a read flag set to true the next empty is false. This however
-- is not true since we can have a write in the same state and then its pointer
-- would be incremented so this check does not give us this particular case.
-- In order to fix this bug we need to have a condition in which to check for that
-- If we simply remove the case when empty is true and write is true then next
-- empty would be false and change it with if write then empty is true it would
-- fix the bug since we now check for every case when we have a write. The other
-- modification I made is to change the second case statement for empty to be
-- checking if next read pointer is equal to the current write pointer then
-- the queue would be empty in the next state. This is true because that
-- would mean that their pointers would become equal in the next state (if
-- we do not have a write in this current state, which is checked in the 
-- first case) and hence our queue would become empty. 

#define DEPTH 5
#define WIDTH 1
#define WORD word[WIDTH]

MODULE main
  VAR 
  -- Internal state
    buffer : array 0 .. (DEPTH-1) of WORD;
    rd_p: 0 .. DEPTH-1;
    wr_p: 0 .. DEPTH-1;
    empty : boolean;  -- Also an output.
  -- Inputs
    write : boolean;
    wr_data : WORD;
    read : boolean;

  FROZENVAR
  -- For use in specifications to capture and refer to data values
     data1 : WORD;  
     data2 : WORD;  
  DEFINE
  -- Outputs
    full := !empty & (rd_p = wr_p);
    rd_data := buffer[rd_p];
  ASSIGN
    init(rd_p) := 0;
    init(wr_p) := 0;
    init(empty) := TRUE;
    -- No init statement for buffer.  Values in buffer at start
    -- left unconstrained.

    next(rd_p) := read & !empty ? (rd_p + 1) mod DEPTH : rd_p;
    next(wr_p) := write & !full ? (wr_p + 1) mod DEPTH : wr_p;

    next(empty) := 
      case
	write : FALSE;
	next(rd_p) = wr_p :TRUE;
	TRUE : empty;
      esac;
    
    next(buffer[0]) := wr_p = 0 & write & !full  ?  wr_data : buffer[0];
    next(buffer[1]) := wr_p = 1 & write & !full  ?  wr_data : buffer[1];
    next(buffer[2]) := wr_p = 2 & write & !full  ?  wr_data : buffer[2];
    next(buffer[3]) := wr_p = 3 & write & !full  ?  wr_data : buffer[3];
    next(buffer[4]) := wr_p = 4 & write & !full  ?  wr_data : buffer[4];




#include "fifo-properties.smv"







